import Home from "./pages/Home";import PrivacyPolicies from "./pages/PrivacyPolicies";import Footer from "./components/Footer";import Header from "./components/Header";import { BrowserRouter, Routes, Route } from "react-router-dom";function App() {  return (    <>      <BrowserRouter>        <Header />        <Routes>          <Route index element={<Home />} />          <Route path="privacy-policies" element={<PrivacyPolicies />} />        </Routes>        <Footer />      </BrowserRouter>    </>  );}export default App;import RotatingPhone from "../components/RotatingPhone";const About = () => {  return (    <div className="about__wrapper">      <RotatingPhone />      <div className="about__content">        <h1>About Me</h1>        <div className="about__content__text">          <p>            I’m a developer with expertise in creating mobile apps for Android,            iOS, and web platforms, focusing on solutions that work seamlessly            across different devices. From building user-friendly mobile apps to            crafting visually appealing websites, I take pride in delivering            high-quality results that meet both functional and design            expectations.          </p>          <p>            With a solid understanding of mobile and web development, I’m able            to bring creative ideas to life in a way that’s practical and            efficient. My goal is to ensure that every project I work on            provides a smooth, engaging experience for users.          </p>          <p>            I approach each project with a focus on collaboration and delivering            tailored solutions that align with the needs and goals of the people            and businesses I work with.          </p>        </div>      </div>          </div>  );};export default About;import Image from "../components/Image";interface CardProps {  icon: string;  imgAlt: string;  title: string;  text: string;}const Card = (props: CardProps) => {  return (    <div className="card">      <div className="card__title">        <Image src={props.icon} alt={props.imgAlt} />        <h1>{props.title}</h1>      </div>      <p>{props.text}</p>    </div>  );};export default Card;import { useEffect, useRef, useState } from "react";import { FixedSizeList as List } from "react-window";import "../styles/main.scss";import sourceCode from "../../source_code.txt";const CodeFlow = () => {  const [content, setContent] = useState<string[]>([]);  const scrollRef = useRef<HTMLDivElement>(null); // Reference to the scrollable content  const positionRef = useRef(0); // Store the current Y position of the content  const animationFrameRef = useRef<number | null>(null); // To store the animation frame ID  useEffect(() => {    // Fetch the text content    fetch(sourceCode)      .then((response) => response.text())      .then((text) => {        const extendedContent = text.split("\n"); // Split into lines        setContent(extendedContent);      });    // Cleanup on component unmount (cancel any running animation)    return () => {      if (animationFrameRef.current) {        cancelAnimationFrame(animationFrameRef.current);      }    };  }, []);  useEffect(() => {    if (content.length === 0) return; // Ensure content is loaded    const animate = () => {      const scrollElement = scrollRef.current;      if (!scrollElement) return;      // Update the position for smooth scrolling      positionRef.current += 6; // Speed of scrolling (increase/decrease this value)      if (positionRef.current >= scrollElement.scrollHeight - 950) {        positionRef.current = 0; // Reset when content scrolls out of view      }      scrollElement.style.transform = `translateY(-${positionRef.current}px)`;      // Request the next frame of the animation      animationFrameRef.current = requestAnimationFrame(animate);    };    // Start the animation loop    animationFrameRef.current = requestAnimationFrame(animate);    // Cleanup on unmount    return () => {      if (animationFrameRef.current) {        cancelAnimationFrame(animationFrameRef.current);      }    };  }, [content]); // Only re-run when content changes  // Virtualized Row Component  const Row = ({    index,    style,  }: {    index: number;    style: React.CSSProperties;  }) => (    <p style={style} className="code-flow__line">      {content[index]}    </p>  );  return (    <div className="code-flow">      {/* Using react-window for virtualization */}      <List        ref={scrollRef}        height={window.innerHeight} // Full height for the virtualized list        itemCount={content.length} // Number of items (lines)        itemSize={20} // Approximate line height        width={"100%"} // Full width      >        {Row}      </List>    </div>  );};export default CodeFlow;import { UiButton } from "../components/UiButton";import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";import { faEnvelope } from "@fortawesome/free-solid-svg-icons";import Link from "../components/Link";import Image from "../components/Image";import FacebookLogo from "../assets/logo_facebook.png";import InstagramLogo from "../assets/logo_instagram.png";import LinkedInLogo from "../assets/logo_linkedin.png";import GithubLogo from "../assets/logo_github.png";const Contact = () => {  return (    <div className="contact">      <h1>Contact</h1>      <p>        If you have a project in mind that you would like to discuss, lets get        in touch! Shoot me an e-mail:      </p>      <div className="contact__email-wrapper">        <Link          children={            <UiButton              theme="light"              label="erman.ergoz@gmail.com"              icon={<FontAwesomeIcon icon={faEnvelope} />}            />          }          destination="mailto:erman.ergoz@gmail.com"        />      </div>      <p>Or find me at:</p>      <div className="contact__card-container">        <Link          destination="https://www.linkedin.com/in/ermanergoz/"          external={true}          children={            <UiButton              theme="light"              label="LinkedIn"              icon={                <Image                  src={LinkedInLogo}                  alt="My LinkedIn profile"                  className="h-10"                />              }            />          }        />        <Link          destination="https://github.com/ermanergoz"          external={true}          children={            <UiButton              theme="light"              label="GitHub"              icon={                <Image                  src={GithubLogo}                  alt="My GitHub profile"                  className="h-10"                />              }            />          }        />        <Link          destination="https://www.facebook.com/erman.ergoz"          external={true}          children={            <UiButton              theme="light"              label="Facebook"              icon={                <Image                  src={FacebookLogo}                  alt="My Facebook profile"                  className="h-10"                />              }            />          }        />        <Link          destination="https://www.instagram.com/ermanergz/"          external={true}          children={            <UiButton              theme="light"              label="Instagram"              icon={                <Image                  src={InstagramLogo}                  alt="My Instagram profile"                  className="h-10"                />              }            />          }        />        {/*        <Link          destination="https://medium.com/@yusufermanergz"          external={true}          children={            <UiButton              theme="light"              label="Medium"              icon={<Image src={MediumLogo} alt="My MediumLogo profile" />}            />          }        />        */}      </div>    </div>  );};export default Contact;import "../styles/main.scss";import { UiButton } from "../components/UiButton";import Link from "../components/Link";import Image from "../components/Image";interface DesktopHeaderProps {  onClick: (label: string) => () => void;  navItems: string[];  logo: string;}const DesktopHeader = (props: DesktopHeaderProps) => {  return (    <header className="desktop-header">      <div className="desktop-header__section">        <Link          destination="/"          title="Home"          children={<Image src={props.logo} alt="Logo" className="h-12" />}        />      </div>      <div className="desktop-header__navigation">        <nav className="desktop-header__navigation__item">          {props.navItems.map((buttonLabel, i) => (            <UiButton              key={i}              label={buttonLabel}              variant="inline"              onClick={props.onClick(buttonLabel)}            />          ))}        </nav>      </div>      <div className="desktop-header__language-selector">        <UiButton          label="Tr | En"          variant="inline"          onClick={props.onClick("buttonLabel")}        />      </div>    </header>  );};export default DesktopHeader;import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";import { faChevronDown } from "@fortawesome/free-solid-svg-icons";import { UiButton } from "../components/UiButton";import { useEffect, useRef, useState } from "react";interface DropdownSelectionProps {  options: string[];  selectedFilters: string[];  onFilterChange: (filter: string) => void;}interface DropdownSelectionProps {  options: string[];  selectedFilters: string[];  onFilterChange: (option: string) => void;}const DropdownSelectionComponent = (props: DropdownSelectionProps) => {  const [isOpen, setOpen] = useState(false);  const firstOptionRef = useRef<HTMLInputElement | null>(null);  const dropdownRef = useRef<HTMLDivElement | null>(null);    // Handle key events for keyboard navigation  const handleKeyDown = (e: React.KeyboardEvent) => {    if (e.key === "ArrowDown" || e.key === "ArrowUp") {      e.preventDefault();      const focusableOptions = dropdownRef.current?.querySelectorAll(        "input[type='checkbox']"      );      const index = Array.from(focusableOptions!).indexOf(document.activeElement as HTMLElement);      if (e.key === "ArrowDown" && index < focusableOptions!.length - 1) {        (focusableOptions![index + 1] as HTMLElement).focus();      } else if (e.key === "ArrowUp" && index > 0) {        (focusableOptions![index - 1] as HTMLElement).focus();      }    }    if (e.key === "Escape") {      setOpen(false);    }  };  // Focus first option when dropdown opens  useEffect(() => {    if (isOpen && firstOptionRef.current) {      firstOptionRef.current.focus();    }  }, [isOpen]);  return (    <div className="dropdown-selection" onKeyDown={handleKeyDown}>      <UiButton        variant="primary"        label="Filter Policies"        icon={<FontAwesomeIcon icon={faChevronDown} />}        onClick={() => setOpen(!isOpen)}        aria-expanded={isOpen}        aria-controls="dropdown-selection-options"        aria-haspopup="true"        theme="light"      />      <div        id="dropdown-selection-options"        ref={dropdownRef}        className={`${isOpen ? "dropdown-selection--open" : "dropdown-selection--closed"}`}        role="menu"        aria-hidden={!isOpen}      >        {props.options.map((option, index) => (          <label key={option} className="dropdown-selection__option">            <input              ref={index === 0 ? firstOptionRef : null}              type="checkbox"              checked={props.selectedFilters.includes(option)}              onChange={() => props.onFilterChange(option)}            />            <span>{option}</span>          </label>        ))}      </div>    </div>  );};export default DropdownSelectionComponent;import { UiButton } from "../components/UiButton";import { useNavigate } from "react-router-dom";import Logo from "../assets/logo.png";import Link from "../components/Link";import WcagBanner from "../assets/banner-wcag.png";import GithubBanner from "../assets/logo-github-white.svg";import Image from "../components/Image";const Footer = () => {  const navigate = useNavigate();  const handleButtonClick = (navigateTo: string) => () => {    switch (navigateTo) {      default: {        navigate(navigateTo);        break;      }    }  };  const getCurrentYear = (): number => new Date().getFullYear();  return (    <footer className="footer">      <div className="footer__content">        <div className="footer__content__banner">          <Image src={Logo} alt="Logo" className="h-12 lg:h-20" />          <p>&copy; 2021 - {getCurrentYear()} Yusuf Erman ERGÖZ</p>        </div>        <UiButton          label="Privacy policies"          variant="inline"          onClick={handleButtonClick("privacy-policies")}        />        <div className="footer__content__banner">          <Link            destination="https://github.com/ermanergoz/ermanergoz.github.io"            title="GitHub repository"            children={<Image src={GithubBanner} alt="GitHub banner" />}            external={true}          />          <Link            destination="https://www.w3.org/WAI/WCAG2AA-Conformance"            title="Explanation of WCAG 2 Level AA conformance"            children={              <Image                src={WcagBanner}                alt="Level AA conformance,  W3C WAI Web Content Accessibility Guidelines 2.1"              />            }          />        </div>      </div>    </footer>  );};export default Footer;import "../styles/main.scss";import Image from "../components/Image";import Hand from "../assets/ic_greeting.svg";const Greeting = () => {  return (    <div className="greeting">      <div className="greeting__title">        <Image className="greeting__title__wave" src={Hand} alt="Vawing hand" />        <h1>{"Hello! My name is Erman"}</h1>      </div>      <h2 className="greeting__subtitle">        {          "I am an application developer and an enthusiastic contributor to open-source projects, driven by a passion for creating exceptional applications."        }      </h2>    </div>  );};export default Greeting;import "../styles/main.scss";import Logo from "../assets/logo.png";import DesktopHeader from "./DesktopHeader";import MobileHeader from "./MobileHeader";const Header = () => {  const scrollToSection = (sectionId: string) => {    const section = document.getElementById(sectionId);    const headerOffset = 100;    const elementPosition = section ? section.getBoundingClientRect().top : 0;    const offsetPosition = elementPosition + window.scrollY - headerOffset;    window.scrollTo({      top: offsetPosition,      behavior: "smooth",    });  };  const handleButtonClick =    (buttonLabel: string = "") =>    () => {      switch (buttonLabel) {        case "Home": {          scrollToSection("home");          break;        }        case "About Me": {          scrollToSection("about");          break;        }        case "What I Do": {          scrollToSection("whatIDo");          break;        }        case "Contact Me": {          scrollToSection("contact");          break;        }      }    };  const navItems = ["Home", "About Me", "What I Do", "Contact Me"];  return (    <>      <DesktopHeader        onClick={handleButtonClick}        navItems={navItems}        logo={Logo}      />      <MobileHeader        onClick={handleButtonClick}        navItems={navItems}        logo={Logo}      />    </>  );};export default Header;import { UiButton } from "./UiButton";import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";import { faChevronDown } from "@fortawesome/free-solid-svg-icons";import Greeting from "../components/Greeting";const HeroBanner = () => {  const onMoreClicked = () => () => {    const section = document.getElementById("about");    const headerOffset = 100;    const elementPosition = section ? section.getBoundingClientRect().top : 0;    const offsetPosition = elementPosition + window.scrollY - headerOffset;    window.scrollTo({      top: offsetPosition,      behavior: "smooth",    });  };  return (    <div className="hero-banner">      <Greeting />      <UiButton        label="MORE"        icon={          <FontAwesomeIcon            className="hero-banner__chevron-animation"            icon={faChevronDown}          />        }        variant={"hero"}        onClick={onMoreClicked()}      />    </div>  );};export default HeroBanner;import "../styles/main.scss";interface ImageProps {  src: string;  alt: string;  className?: string;}const Image = (props: ImageProps) => {  return (    <img      className={`${props.className}`}      src={props.src}      alt={props.alt}      aria-label={props.alt}    />  );};export default Image;import "../styles/main.scss";interface LinkProps {  destination: string;  title?: string;  children: React.ReactNode;  external?: boolean;}const Link = ({ destination, title = destination, children, external = false }: LinkProps) => {  const isExternalLink = external || destination.startsWith("http");  return (    <a      className="link"      href={destination}      title={title}      aria-label={title}      {...(isExternalLink && { rel: "noopener noreferrer", target: "_blank" })}    >      {children}    </a>  );};export default Link;import "../styles/main.scss";import { UiButton } from "../components/UiButton";import { Sling as Hamburger } from "hamburger-react";import { useState } from "react";import Link from "../components/Link";import Image from "../components/Image";interface MobileHeaderProps {  onClick: (label: string) => () => void;  navItems: string[];  logo: string;}const MobileHeader = (props: MobileHeaderProps) => {  const [isOpen, setOpen] = useState(false);  const handleNavClick = (label: string) => {    const clickAction = props.onClick(label);    clickAction();    setOpen(false);  };  return (    <header className="mobile-header">      <div className="mobile-header__menu">        <Hamburger toggled={isOpen} toggle={setOpen} />        <nav          className={`mobile-header__menu__drop-down ${            isOpen ? "max-h-96" : "max-h-0"          }`}        >          {props.navItems.map((buttonLabel) => (            <div              className="mobile-header__menu__drop-down__item"              key={buttonLabel}            >              <UiButton                label={buttonLabel}                variant="inline"                onClick={() => handleNavClick(buttonLabel)}              />            </div>          ))}        </nav>      </div>      <div className="mobile-header__logo">        <Link          destination="/"          title="Home"          children={<Image src={props.logo} alt="Logo" className="h-12" />}        />      </div>      <div className="mobile-header__language-selector">        <UiButton          label="Tr | En"          variant="inline"          onClick={() => handleNavClick("Tr | En")}        />      </div>    </header>  );};export default MobileHeader;import { OBJLoader } from "three/examples/jsm/loaders/OBJLoader.js";import { useLoader } from "@react-three/fiber";const PhoneModel = () => {    const obj = useLoader(OBJLoader, "/assets/phone.obj");      return (      <primitive        object={obj}        scale={[0.006, 0.006, 0.006]}        position={[0, 0, 0]}      />    );  };  export default PhoneModel;  import { useRef, useEffect, useState } from "react";import { Canvas, useFrame } from "@react-three/fiber";import PhoneModel from "./PhoneModel";import * as THREE from "three";const RotatingPhone = () => {  const [rotationY, setRotationY] = useState(Math.PI);  const aboutRef = useRef<HTMLDivElement>(null);  const minRotation = Math.PI;  const maxRotation = 0;  const earlyStartOffset = window.innerHeight / 5;  const calculateRotation = (scrollFraction: number) => {    return minRotation + scrollFraction * (maxRotation - minRotation);  };  const handleScroll = () => {    if (aboutRef.current) {      const aboutTop = aboutRef.current.getBoundingClientRect().top;      const windowHeight = window.innerHeight;      const scrollFraction = Math.min(        Math.max(1 - (aboutTop - earlyStartOffset) / (windowHeight / 2), 0),        1      );      setRotationY(calculateRotation(scrollFraction));    }  };  useEffect(() => {    window.addEventListener("scroll", handleScroll);    return () => {      window.removeEventListener("scroll", handleScroll);    };  }, []);  return (    <div ref={aboutRef} className="rotating-phone">      <Canvas>        {/*<ambientLight intensity={0} />*/}        <directionalLight position={[10, 10, 5]} intensity={0.5} />        <Phone rotationY={rotationY} />      </Canvas>    </div>  );};const Phone = ({ rotationY }: { rotationY: number }) => {  const meshRef = useRef<THREE.Mesh>(null);  useFrame(() => {    if (meshRef.current) {      meshRef.current.rotation.y = rotationY;    }  });  return (    <mesh ref={meshRef}>      <PhoneModel />    </mesh>  );};export default RotatingPhone;import "../styles/main.scss";interface UiButtonProps {  variant?: "primary" | "secondary" | "inline" | "hero";  theme?: "light" | "dark";  label: string;  icon?: React.ReactNode;  onClick?: () => void;}export const UiButton = ({  variant = "primary",  theme = "dark",  label,  icon,  ...props}: UiButtonProps) => {  return (    <button      className={[        "ui-button",        `ui-button--${theme}`,        `ui-button__${variant}`,      ].join(" ")}      aria-label={label}      {...props}    >      {icon && <span>{icon}&emsp;&emsp;</span>}      {label}    </button>  );};import Card from "../components/Card";import AndroidIcon from "../assets/ic_android.svg";import AppleIcon from "../assets/ic_apple.svg";import MultiplatformIcon from "../assets/ic_multiplatform.svg";import FrontEndIcon from "../assets/ic_frontend.svg";const WhatIDo = () => {  return (    <div className="what-i-do">      <h1>What I do?</h1>      <div className="what-i-do__card-container">        <Card          icon={AndroidIcon}          imgAlt="Android icon"          title="Android"          text="I build native Android apps, using the latest technologies and best practices."        />        <Card          icon={AppleIcon}          imgAlt="Apple icon"          title="iOS"          text="I build high-quality iOS apps that are fast, reliable, and easy to use."        />        <Card          icon={MultiplatformIcon}          imgAlt="Multiplatform icon"          title="Multiplatform"          text="I develop multi-platform apps using frameworks like Kotlin Multiplatform, Flutter and React Native, allowing you to reach users on both Android and iOS with a single codebase."        />        <Card          icon={FrontEndIcon}          imgAlt="Front end Android icon"          title="Front End"          text="I design and develop responsive, user-friendly websites using modern web technologies."        />      </div>      <p>        I am highly adaptable and able to collaborate effectively on projects        outside of my spectrum, depending on your expectations.      </p>    </div>  );};export default WhatIDo;import "../styles/layout/layout.scss";interface LayoutProps {  children: React.ReactNode;}function Layout(props: LayoutProps) {  return (    <>      <div className="layout">        {props.children}      </div>    </>  );}export default Layout;import React from 'react'import ReactDOM from 'react-dom/client'import App from './App.tsx'ReactDOM.createRoot(document.getElementById('root')!).render(  <React.StrictMode>    <App />  </React.StrictMode>,)import CodeFlow from "../components/CodeFlow";import "../styles/main.scss";import HeroBanner from "../components/HeroBanner";import Layout from "../layouts/Layout";import About from "../components/About";import WhatIDo from "../components/WhatIDo";import Contact from "../components/Contact";function Home() {  return (    <Layout>      <section id="home">        <CodeFlow />        <HeroBanner />      </section>      <section id="about">        <About />      </section>      <section id="whatIDo">        <WhatIDo />      </section>      <section id="contact">        <Contact />      </section>    </Layout>  );}export default Home;import React, { useState } from "react";import "../styles/main.scss";import "../components/HeroBanner";import Layout from "../layouts/Layout";import DropdownSelectionComponent from "../components/DropdownSelectionComponent";import policiesData from "../data/policies.json";import Link from "../components/Link";const PrivacyPolicies: React.FC = () => {  const filterOptions = ["Android", "iOS", "Web"];  const [selectedFilters, setSelectedFilters] = useState<string[]>([]);  const handleFilterChange = (filter: string) => {    setSelectedFilters((prevFilters) =>      prevFilters.includes(filter)        ? prevFilters.filter((f) => f !== filter)        : [...prevFilters, filter]    );  };  const filteredPolicies = selectedFilters.length    ? (        policiesData as {          id: number;          title: string;          file: string;          type: string;        }[]      ).filter((policy) => selectedFilters.includes(policy.type))    : policiesData;  return (    <Layout>      <div className="privacy-policies">        <h1>Privacy Policies</h1>        <DropdownSelectionComponent          options={filterOptions}          selectedFilters={selectedFilters}          onFilterChange={handleFilterChange}        />        <ul className="privacy-policies__list">          {filteredPolicies.map((policy) => (            <li key={policy.id}>              <Link                destination={`policies/${policy.file}`}                children={policy.title}              />            </li>          ))}        </ul>      </div>    </Layout>  );};export default PrivacyPolicies;