import Home from "./pages/Home";import PrivacyPolicies from "./pages/PrivacyPolicies";import Footer from "./components/Footer";import Header from "./components/Header";import { BrowserRouter, Routes, Route } from "react-router-dom";function App() {  return (    <>      <BrowserRouter>        <Header />        <Routes>          <Route index element={<Home />} />          <Route path="privacy-policies" element={<PrivacyPolicies />} />        </Routes>        <Footer />      </BrowserRouter>    </>  );}export default App;import { useEffect, useState } from "react";import "../styles/main.scss";import sourceCode from "../../source_code.txt";const CodeFlow = () => {  const [content, setContent] = useState<string>("");  useEffect(() => {    fetch(sourceCode)      .then((response) => response.text())      .then((text) => {        const extendedContent = text.repeat(500);        setContent(extendedContent);      });  }, []);  return (    <div className="code-flow">      <div className="code-flow__content">        {content.split("\n").map((line, index) => (          <p key={index} className="code-flow__line">            {line}          </p>        ))}      </div>    </div>  );};export default CodeFlow;import "../styles/main.scss";import { UiButton } from "../components/UiButton";interface DesktopHeaderProps {  onClick: (label: string) => () => void;  navItems: string[];  logo: string;}const DesktopHeader = (props: DesktopHeaderProps) => {  return (    <header className="desktop-header">      <div className="desktop-header__section">        <a href="/">          <img src={props.logo} alt="Logo" />        </a>      </div>      <div className="desktop-header__navigation">        <nav className="desktop-header__navigation__item">          {props.navItems.map((buttonLabel) => (            <UiButton              label={buttonLabel}              variant="inline"              theme="dark"              onClick={props.onClick(buttonLabel)}            />          ))}        </nav>      </div>      <div className="desktop-header__language-selector">        <UiButton          label="Tr | En"          variant="inline"          theme="dark"          onClick={props.onClick("buttonLabel")}        />      </div>    </header>  );};export default DesktopHeader;import { useState } from "react";import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";import { faChevronDown } from "@fortawesome/free-solid-svg-icons";import { UiButton } from "../components/UiButton";interface DropdownSelectionProps {  options: string[];  selectedFilters: string[];  onFilterChange: (filter: string) => void;}const DropdownSelectionComponent = (props: DropdownSelectionProps) => {  const [isOpen, setOpen] = useState(false);  return (    <div className="dropdown-selection">      <UiButton        variant="primary"        label={          <p>            Filter Policies&emsp;            <FontAwesomeIcon icon={faChevronDown} />          </p>        }        onClick={() => setOpen(!isOpen)}      />      <div className={`${isOpen ? "dropdown-selection--open" : "dropdown-selection--closed"}`}>        {props.options.map((option) => (          <label key={option} className="dropdown-selection__option">            <input              type="checkbox"              checked={props.selectedFilters.includes(option)}              onChange={() => props.onFilterChange(option)}            />            <span>{option}</span>          </label>        ))}      </div>    </div>  );};export default DropdownSelectionComponent;import { UiButton } from "../components/UiButton";import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";import { faChevronUp } from "@fortawesome/free-solid-svg-icons";import { useNavigate } from "react-router-dom";const Footer = () => {  const navigate = useNavigate();  const handleButtonClick = (navigateTo: string) => () => {    switch (navigateTo) {      case "to_the-top": {        window.scrollTo({          top: 0,          behavior: "smooth",        });        break;      }      default: {        navigate(navigateTo);        break;      }    }  };  const getCurrentYear = (): number => new Date().getFullYear();  return (    <footer className="footer">      <div className="footer__content">        <div className="footer__content--wide">          <UiButton            label={              <p>                To the top&emsp;                <FontAwesomeIcon icon={faChevronUp} />              </p>            }            variant="secondary"            theme="dark"            onClick={handleButtonClick("to_the-top")}          />        </div>        <p>&copy; 2021 - {getCurrentYear()} Yusuf Erman ERGÃ–Z</p>        <UiButton          label="Privacy policies"          variant="inline"          theme="dark"          onClick={handleButtonClick("privacy-policies")}        />      </div>    </footer>  );};export default Footer;import "../styles/main.scss";import Logo from "../assets/logo.svg";import DesktopHeader from "./DesktopHeader";import MobileHeader from "./MobileHeader";const Header = () => {  const handleButtonClick = (buttonLabel: string = "") => () => {    console.log(`${buttonLabel} is clicked`);  };  const navItems = ["About", "Services", "Portfolio", "Contact"];  return (    <>      <DesktopHeader onClick={handleButtonClick} navItems={navItems} logo={Logo} />      <MobileHeader onClick={handleButtonClick} navItems={navItems} logo={Logo} />    </>  );};export default Header;import "../styles/main.scss";import { UiButton } from "./UiButton";const HeroBanner = () => {  const onMoreClicked =    (buttonLabel: string = "") =>    () => {      console.log(`${buttonLabel} is clicked`);    };  return (    <div className="hero-banner">      <div className="hero-banner__wrapper">        <h1 className="hero-banner__title">{"HELLO WORLD!"}</h1>        <h2 className="hero-banner__subtitle">{"~Development in progress~"}</h2>      </div>      <UiButton        label="MORE"        variant={"secondary"}        theme="dark"        isWide={true}        onClick={onMoreClicked("More")}      />    </div>  );};export default HeroBanner;import "../styles/main.scss";interface LinkProps {  destination: string;  children: React.ReactNode;}const Link = (props: LinkProps) => {  return (    <a className="link" href={props.destination}>      {props.children}    </a>  );};export default Link;import "../styles/main.scss";import { UiButton } from "../components/UiButton";import { Sling as Hamburger } from "hamburger-react";import { useState } from "react";interface MobileHeaderProps {  onClick: (label: string) => () => void;  navItems: string[];  logo: string;}const MobileHeader = (props: MobileHeaderProps) => {  const [isOpen, setOpen] = useState(false);  return (    <header className="mobile-header">      <div className="mobile-header__menu">        <Hamburger toggled={isOpen} toggle={setOpen} />        <nav          className={`mobile-header__menu__drop-down ${isOpen ? "max-h-96" : "max-h-0"}`}        >          {props.navItems.map((buttonLabel) => (            <div className="mobile-header__menu__drop-down__item" key={buttonLabel}>              <UiButton                label={buttonLabel}                variant="inline"                theme="dark"                onClick={props.onClick(buttonLabel)}              />            </div>          ))}        </nav>      </div>      <div className="mobile-header__logo">        <a href="/">          <img src={props.logo} alt="Logo" />        </a>      </div>      <div className="mobile-header__language-selector">        <UiButton          label="Tr | En"          variant="inline"          theme="dark"          onClick={props.onClick("buttonLabel")}        />      </div>    </header>  );};export default MobileHeader;import "../styles/main.scss";interface UiButtonProps {  variant?: "primary" | "secondary" | "inline";  theme?: "light" | "dark";  isWide?: boolean;  label: React.ReactNode;  onClick?: () => void;}export const UiButton = ({  variant: variant = "primary",  theme: theme = "light",  isWide = false,  label,  ...props}: UiButtonProps) => {  const isWideButton = isWide ? "wide" : "";  return (    <button      className={["ui-button", `ui-button--${theme} ui-button--${isWideButton}`, `ui-button__${variant}`].join(" ")}      {...props}    >      {label}    </button>  );};import "../styles/layout/layout.scss";interface LayoutProps {  children: React.ReactNode;}function Layout(props: LayoutProps) {  return (    <>      <div className="layout">        {props.children}      </div>    </>  );}export default Layout;import React from 'react'import ReactDOM from 'react-dom/client'import App from './App.tsx'ReactDOM.createRoot(document.getElementById('root')!).render(  <React.StrictMode>    <App />  </React.StrictMode>,)import CodeFlow from "../components/CodeFlow";import "../styles/main.scss";import HeroBanner from "../components/HeroBanner";import Layout from "../layouts/Layout";function Home() {  return (    <Layout>      <CodeFlow />      <HeroBanner />    </Layout>  );}export default Home;import React, { useState } from "react";import "../styles/main.scss";import "../components/HeroBanner";import Layout from "../layouts/Layout";import DropdownSelectionComponent from "../components/DropdownSelectionComponent";import policiesData from "../data/policies.json";import Link from "../components/Link";const PrivacyPolicies: React.FC = () => {  const filterOptions = ["Android", "iOS", "Web"];  const [selectedFilters, setSelectedFilters] = useState<string[]>([]);  const handleFilterChange = (filter: string) => {    setSelectedFilters((prevFilters) =>      prevFilters.includes(filter)        ? prevFilters.filter((f) => f !== filter)        : [...prevFilters, filter]    );  };  const filteredPolicies = selectedFilters.length    ? (        policiesData as {          id: number;          title: string;          file: string;          type: string;        }[]      ).filter((policy) => selectedFilters.includes(policy.type))    : policiesData;  return (    <Layout>      <div className="privacy-policies">        <h1 className="privacy-policies__page-title">Privacy Policies</h1>        <DropdownSelectionComponent          options={filterOptions}          selectedFilters={selectedFilters}          onFilterChange={handleFilterChange}        />        <ul className="privacy-policies__list">          {filteredPolicies.map((policy) => (            <li key={policy.id}>              <Link                destination={`policies/${policy.file}`}                children={policy.title}              />            </li>          ))}        </ul>      </div>    </Layout>  );};export default PrivacyPolicies;